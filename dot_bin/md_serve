#!/bin/bash

# Markdown Directory Server Script
# Serves a directory containing markdown files as a website
# Supports multiple methods: live serving or static generation

set -e

# Default values
DIRECTORY="."
PORT=1337
METHOD="markserv"
OPEN_BROWSER=true

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_usage() {
    echo "Usage: $0 [OPTIONS] [DIRECTORY]"
    echo ""
    echo "Serve a directory containing markdown files as a website"
    echo ""
    echo "OPTIONS:"
    echo "  -p, --port PORT       Port to serve on (default: 1337)"
    echo "  -m, --method METHOD   Serving method: markserv, serve-md, static, auto (default: markserv)"
    echo "  -n, --no-browser      Don't automatically open browser"
    echo "  -h, --help           Show this help message"
    echo ""
    echo "METHODS:"
    echo "  markserv    - Live markdown server with GitHub styling and live reload"
    echo "  serve-md    - Simple Python-based markdown server"
    echo "  static      - Convert to static HTML using pandoc and serve"
    echo "  auto        - Auto-detect best available method"
    echo ""
    echo "EXAMPLES:"
    echo "  $0                                    # Serve current directory"
    echo "  $0 ./docs                            # Serve docs directory"
    echo "  $0 -p 3000 -m markserv ./docs       # Use markserv on port 3000"
    echo "  $0 -m static ./wiki                  # Convert to static HTML"
}

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

install_markserv() {
    log "Installing markserv via npm..."
    if check_command npm; then
        npm install -g markserv
    elif check_command yarn; then
        yarn global add markserv
    else
        error "npm or yarn is required to install markserv"
        return 1
    fi
}

install_serve_md() {
    log "Installing serve-md via pip..."
    if check_command pip; then
        pip install serve-md
    elif check_command pip3; then
        pip3 install serve-md
    else
        error "pip is required to install serve-md"
        return 1
    fi
}

serve_with_markserv() {
    log "Starting markserv on port $PORT..."
    log "Features: GitHub styling, live reload, directory indexing"
    
    if ! check_command markserv; then
        warn "markserv not found. Installing..."
        install_markserv || return 1
    fi
    
    # Check if directory has index.md
    if [[ -f "$DIRECTORY/index.md" ]]; then
        log "Found index.md in directory"
    else
        warn "No index.md found. markserv will show directory listing."
    fi
    
    if [[ "$OPEN_BROWSER" == true ]]; then
        log "Server will be available at: http://localhost:$PORT"
        log "Browser will open automatically"
        markserv -p "$PORT" "$DIRECTORY"
    else
        log "Server will be available at: http://localhost:$PORT"
        markserv -p "$PORT" --no-open "$DIRECTORY"
    fi
}

serve_with_serve_md() {
    log "Starting serve-md on port $PORT..."
    log "Features: Simple markdown rendering, directory indexing"
    
    if ! check_command serve-md; then
        warn "serve-md not found. Installing..."
        install_serve_md || return 1
    fi
    
    # Check if directory has index.md
    if [[ -f "$DIRECTORY/index.md" ]]; then
        log "Found index.md in directory"
    else
        warn "No index.md found. serve-md will show directory listing."
    fi
    
    log "Server will be available at: http://localhost:$PORT"
    
    if [[ "$OPEN_BROWSER" == true ]]; then
        log "Opening browser..."
        # Start server in background and open browser
        serve-md -p "$PORT" "$DIRECTORY" &
        SERVER_PID=$!
        sleep 2
        if check_command xdg-open; then
            xdg-open "http://localhost:$PORT"
        elif check_command open; then
            open "http://localhost:$PORT"
        fi
        wait $SERVER_PID
    else
        serve-md -p "$PORT" "$DIRECTORY"
    fi
}

serve_static() {
    log "Converting markdown to static HTML..."
    
    if ! check_command pandoc; then
        error "pandoc is required for static generation"
        error "Install with: sudo apt-get install pandoc  # or brew install pandoc"
        return 1
    fi
    
    local output_dir="${DIRECTORY}_html"
    local temp_dir=$(mktemp -d)
    
    log "Output directory: $output_dir"
    
    # Create output directory
    mkdir -p "$output_dir"
    
    # Find all markdown files
    find "$DIRECTORY" -name "*.md" -type f | while read -r md_file; do
        # Get relative path
        rel_path=${md_file#"$DIRECTORY"/}
        # Change extension to .html
        html_file="$output_dir/${rel_path%.md}.html"
        # Create directory structure
        mkdir -p "$(dirname "$html_file")"
        
        log "Converting: $rel_path"
        pandoc "$md_file" -f markdown -t html5 -s --css=style.css -o "$html_file"
    done
    
    # Copy other files (images, etc.)
    find "$DIRECTORY" -type f ! -name "*.md" | while read -r file; do
        rel_path=${file#"$DIRECTORY"/}
        target="$output_dir/$rel_path"
        mkdir -p "$(dirname "$target")"
        cp "$file" "$target"
    done
    
    # Create a simple CSS file if it doesn't exist
    if [[ ! -f "$output_dir/style.css" ]]; then
        cat > "$output_dir/style.css" << 'EOF'
body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #333;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}
pre {
    background: #f4f4f4;
    padding: 10px;
    border-radius: 4px;
    overflow-x: auto;
}
code {
    background: #f4f4f4;
    padding: 2px 4px;
    border-radius: 3px;
}
blockquote {
    border-left: 4px solid #ddd;
    margin: 0;
    padding-left: 20px;
    color: #666;
}
EOF
    fi
    
    log "Static HTML generated in: $output_dir"
    
    # Serve the static files
    log "Starting HTTP server on port $PORT..."
    log "Server will be available at: http://localhost:$PORT"
    
    if [[ "$OPEN_BROWSER" == true ]]; then
        log "Opening browser..."
        if check_command python3; then
            cd "$output_dir" && python3 -m http.server "$PORT" &
        elif check_command python; then
            cd "$output_dir" && python -m SimpleHTTPServer "$PORT" &
        else
            error "Python is required to serve static files"
            return 1
        fi
        SERVER_PID=$!
        sleep 2
        if check_command xdg-open; then
            xdg-open "http://localhost:$PORT"
        elif check_command open; then
            open "http://localhost:$PORT"
        fi
        wait $SERVER_PID
    else
        if check_command python3; then
            cd "$output_dir" && python3 -m http.server "$PORT"
        elif check_command python; then
            cd "$output_dir" && python -m SimpleHTTPServer "$PORT"
        else
            error "Python is required to serve static files"
            return 1
        fi
    fi
}

auto_detect_method() {
    log "Auto-detecting best serving method..."
    
    if check_command markserv; then
        log "Found markserv - using for live serving"
        METHOD="markserv"
    elif check_command serve-md; then
        log "Found serve-md - using for live serving"
        METHOD="serve-md"
    elif check_command node || check_command npm; then
        log "Found Node.js - will install and use markserv"
        METHOD="markserv"
    elif check_command python3 || check_command python; then
        if check_command pip || check_command pip3; then
            log "Found Python and pip - will install and use serve-md"
            METHOD="serve-md"
        else
            log "Found Python but no pip - using static generation"
            METHOD="static"
        fi
    elif check_command pandoc; then
        log "Found pandoc - using static generation"
        METHOD="static"
    else
        error "No suitable tools found. Please install one of:"
        error "  - Node.js and npm (for markserv)"
        error "  - Python and pip (for serve-md)"
        error "  - pandoc (for static generation)"
        return 1
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -m|--method)
            METHOD="$2"
            shift 2
            ;;
        -n|--no-browser)
            OPEN_BROWSER=false
            shift
            ;;
        -h|--help)
            print_usage
            exit 0
            ;;
        -*)
            error "Unknown option: $1"
            print_usage
            exit 1
            ;;
        *)
            DIRECTORY="$1"
            shift
            ;;
    esac
done

# Validate directory
if [[ ! -d "$DIRECTORY" ]]; then
    error "Directory '$DIRECTORY' does not exist"
    exit 1
fi

# Convert to absolute path
DIRECTORY=$(cd "$DIRECTORY" && pwd)

log "Serving directory: $DIRECTORY"
log "Port: $PORT"

# Auto-detect method if needed
if [[ "$METHOD" == "auto" ]]; then
    auto_detect_method
fi

# Serve based on method
case $METHOD in
    markserv)
        serve_with_markserv
        ;;
    serve-md)
        serve_with_serve_md
        ;;
    static)
        serve_static
        ;;
    *)
        error "Unknown method: $METHOD"
        error "Valid methods: markserv, serve-md, static, auto"
        exit 1
        ;;
esac
