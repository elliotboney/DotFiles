#
# Set to true if you want to output some debug info
#
DEBUG=false


if [ "${DEBUG}" = true ]; then
  # Use EPOCHREALTIME for better precision and no subprocess overhead
  if [[ -n "${EPOCHREALTIME+x}" ]]; then
    export N=$EPOCHREALTIME
    export N_ORIG=$EPOCHREALTIME
    export USE_EPOCHREALTIME=true
  else
    # Fallback to date command
{{- if eq .chezmoi.os "darwin" }}
    if $(type gdate >/dev/null); then
      DATECOMMAND='gdate'
    else
      DATECOMMAND='date'
    fi
{{- else }}
    DATECOMMAND='date'
    export N=$($DATECOMMAND +%N)
    export N_ORIG=$($DATECOMMAND +%N)
    export USE_EPOCHREALTIME=false
{{- end }}
  fi
  export N_SPACE=""
fi
# Echo out if we have debug set to true
function decho() {
  if [ "${DEBUG}" = true ]; then
    if [[ "${USE_EPOCHREALTIME}" = true ]]; then
      NOW=$EPOCHREALTIME
      # Use floating point arithmetic to avoid integer overflow
      ELAPSED=$(printf "%.0f" $(( (NOW - N) * 1000 )))
    else
      NOW=$(${DATECOMMAND} +%N)
      ELAPSED=$(((${NOW}-${N})/1000000))
    fi
    echo "${N_SPACE}\x1b[0;32m[${ELAPSED}ms]\x1b[m $@"
    export N=${NOW}
  fi
}

function setindent() {
  export N_SPACE="$@"
}

decho "\x1b[1;36mProcessing .zshrc\x1b[m"
setopt extended_glob
setopt glob_dots

if [ -f "${HOME}/.private_exports" ];then
  source "${HOME}/.private_exports"
  decho "${HOME}/.private_exports"
fi

# we need DOTPATH
if [ -f "${HOME}/.dotfilelocation" ];then
  source "${HOME}/.dotfilelocation"
  decho "${HOME}/.dotfilelocation"
fi

# Zinit - Modern zsh plugin manager (much faster than antigen)
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -d "$ZINIT_HOME" ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (zinit)‚Ä¶%f"
    command mkdir -p "$(dirname $ZINIT_HOME)"
    command git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
decho "zinit loaded"

# Load plugins with turbo mode for speed
zinit wait lucid light-mode for \
    atinit"zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
    atload"_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
    blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions

# Load other plugins without turbo (they're fast enough)
zinit light ael-code/zsh-colored-man-pages
zinit light chrissicool/zsh-256color
zinit light desyncr/zsh-ctrlp
zinit light joshskidmore/zsh-fzf-history-search

# Load oh-my-zsh libraries and plugins
zinit snippet OMZL::git.zsh
zinit snippet OMZL::history.zsh
zinit snippet OMZL::key-bindings.zsh
zinit snippet OMZL::theme-and-appearance.zsh
zinit snippet OMZP::command-not-found
zinit snippet OMZP::rsync
decho "zinit plugins loaded"


ZSH="${HOME}/.oh-my-zsh"
ZSH_CUSTOM="${DOTPATH}/zshcustom"
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor root line)

# Set to this to use case-sensitive completion
export CASE_SENSITIVE="false"

# Uncomment to change how often before auto-updates occur? (in days)
export UPDATE_ZSH_DAYS=14

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (platform and machine-specific)
if [[ -f "${HOME}/.zshpackages" ]]; then
  source "${HOME}/.zshpackages"
else
  plugins=(
{{- if eq .chezmoi.os "darwin" }}
    brew
{{- end }}

    bun
    docker
    docker-compose
    colorize
    compleat
    cp
    history
    # osx
    rsync
    screen
    ssh
    sudo
    wpclitwo
    )
fi

# Add addition zsh completions
fpath=(${HOME}/.zsh-completions $fpath)

# Load oh my zsh
source "${ZSH}/oh-my-zsh.sh"
decho "${ZSH}/oh-my-zsh.sh"

if [ -f "${HOME}/.nvm/nvm.sh" ]; then
  source ${HOME}/.nvm/nvm.sh --no-use
  decho "${HOME}/.nvm/nvm.sh"
fi

# Enable extended globbing
setopt extendedglob

#####
# New Stuff from old bashrc
#####

EXPORT_FUNCTIONS=true
HOST_NAME=$(uname -n)

# Setup the main shell variables and functions (templated platform detection)
{{- if eq .chezmoi.os "darwin" }}
SHELL_PLATFORM='OSX'
shell_is_linux       () { false ; }
shell_is_osx         () { true ; }
{{- else if eq .chezmoi.os "linux" }}
SHELL_PLATFORM='LINUX'
shell_is_linux       () { true ; }
shell_is_osx         () { false ; }
{{- else }}
SHELL_PLATFORM='BSD'
shell_is_linux       () { false ; }
shell_is_osx         () { false ; }
{{- end }}

# Platform detection functions (templated)
shell_is_router      () { [[ "$OSTYPE" == *'gnueabi'* ]] ; }
shell_is_elliot      () { [[ "$HOST_NAME" == *'Elliots'* ]] ; }
shell_is_login       () { shopt -q login_shell ; }
shell_is_interactive () { test -n "$PS1" ; }
shell_is_script      () { ! shell_is_interactive ; }

# Helper function to load directories of shell scripts
include_d() {
    local dir=$1
    local functions_dir="${HOME}/.dotfiles/${dir}.d"
    
    if [[ -d "$functions_dir" && -r "$functions_dir" && -x "$functions_dir" ]]; then
        decho "   üìÅ Processing ${dir}/ directory..."
        
        for script_file in "$functions_dir"/*.sh; do
            if [[ -f "$script_file" && -r "$script_file" ]]; then
                source "$script_file"
                # decho "   $(basename "$script_file")"
            fi
        done
    else
        decho "   ‚ö†Ô∏è  Directory not found: $functions_dir"
    fi
}

include_d early_init
include_d utilities  
include_d completions
include_d environment

# Unset local variables
unset fn_cmd
unset EXPORT_FUNCTIONS
unset BASHRC_DISPATCH_PID

# makes color constants available
autoload -U colors
colors

# enable sick move tool
autoload -U zmv

# Enable automatic rehash for new commands in PATH
zstyle ':completion:*' rehash true

decho "autoload -U colors and shit"

# Stuff for alias-finder plugin
zstyle ':omz:plugins:alias-finder' autoload yes
zstyle ':omz:plugins:alias-finder' longer yes
zstyle ':omz:plugins:alias-finder' exact yes
zstyle ':omz:plugins:alias-finder' cheaper yes

# sweet renaming shit
autoload -U zmv

# Atuin - Better shell history (if installed)
if command -v atuin >/dev/null 2>&1; then
    eval "$(atuin init zsh)"
else
    echo "‚ö†Ô∏è  Atuin not installed. Run: brew install atuin"
fi

# Starship - Modern prompt (if installed)  
if command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
    decho "‚úÖ Starship (modern prompt) loaded"
else
    echo "‚ö†Ô∏è  Starship not installed. Run: brew install starship"
fi

[[ -s "${HOME}/.rvm/scripts/rvm" ]] && source "${HOME}/.rvm/scripts/rvm"
decho "${HOME}/.rvm/scripts/rvm"

decho "\x1b[1;36mDone with .zshrc\x1b[m"

export ZSHRCRUN=true

# Execute local stuff if it exists
if [ -f $HOME/.zshrc.local ] ; then
  decho "    \x1b[38;5;242m$HOME/.zshrc.local"
  source $HOME/.zshrc.local
fi

export FPATH="${HOME}/.dotfiles/utilities.d:${FPATH}" && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

if [ -f $HOME/.grc.zsh ] ; then
  source $HOME/.grc.zsh
fi

# Override grc ls alias with eza (must be after grc loading)
if command_exists eza; then
  alias ls="eza -hF --group-directories-first --color=always"
fi

if [ "$DEBUG" = true ]; then
  if [[ "${USE_EPOCHREALTIME}" = true ]]; then
    TOTAL=$EPOCHREALTIME
    TOTAL_MS=$(printf "%.0f" $(( (TOTAL - N_ORIG) * 1000 )))
  else
    TOTAL=$($DATECOMMAND +%N)
    TOTAL_MS=$(((${TOTAL}-${N_ORIG})/1000000))
  fi
  echo -e "------------------------------------------------------------------------------------"
  echo -e "\x1b[1;34m Total Time: \x1b[1;32m[${TOTAL_MS}ms]\x1b[m                       "
  echo -e "------------------------------------------------------------------------------------"
fi
